"""Added Dataset, Location, Organization, Person  models

Revision ID: 878d19403669
Revises: 6c61e0875de3
Create Date: 2024-05-31 10:55:19.205344

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from geoalchemy2 import Geometry

# revision identifiers, used by Alembic.
revision: str = "878d19403669"
down_revision: Union[str, None] = "6c61e0875de3"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "locations",
        sa.Column(
            "parent_id",
            sa.UUID(),
            nullable=True,
            comment="Identifier for the parent location",
        ),
        sa.Column(
            "higher_geography_path",
            sa.String(),
            nullable=True,
            comment="Hierarchical path of geographic names less specific than locality",
        ),
        sa.Column(
            "geom",
            Geometry(srid=4326, from_text="ST_GeomFromEWKT", name="geometry"),
            nullable=True,
            comment="Spatial geometry representing a location as WKB",
        ),
        sa.Column(
            "geometry_precision",
            sa.Float(),
            nullable=True,
            comment="Precision of the coordinates",
        ),
        sa.Column(
            "identifier",
            sa.String(),
            nullable=False,
            comment="Unique text identifier used in hierarchical path",
        ),
        sa.Column(
            "country",
            sa.String(),
            nullable=True,
            comment="Country or major administrative unit of the location",
        ),
        sa.Column(
            "state_province",
            sa.String(),
            nullable=True,
            comment="Administrative region smaller than country",
        ),
        sa.Column(
            "municipality",
            sa.String(),
            nullable=True,
            comment="Smaller administrative region than county",
        ),
        sa.Column(
            "locality",
            sa.String(),
            nullable=True,
            comment="Specific description of the place",
        ),
        sa.Column(
            "depth_min",
            sa.Float(),
            nullable=True,
            comment="Minimum depth below local surface in meters",
        ),
        sa.Column(
            "elevation_max",
            sa.Float(),
            nullable=True,
            comment="Maximum elevation above sea level in meters",
        ),
        sa.Column(
            "sampling_remarks",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Notes about the sampling location including meteorological context",
        ),
        sa.Column(
            "remarks",
            sa.String(),
            nullable=True,
            comment="General comments or notes about the location",
        ),
        sa.Column(
            "provided_id",
            sa.String(),
            nullable=True,
            comment="External ID from a service",
        ),
        sa.Column(
            "provider_source",
            sa.String(),
            nullable=True,
            comment="Source URL of the external service providing the ID",
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["locations.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("identifier"),
    )
    op.create_table(
        "people",
        sa.Column("full_name", sa.String(), nullable=False),
        sa.Column("birth_date", sa.Date(), nullable=True),
        sa.Column("death_date", sa.Date(), nullable=True),
        sa.Column("has_gender", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("identity_provider", sa.String(), nullable=True),
        sa.Column("identity_token", sa.String(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "organizations",
        sa.Column(
            "parent_id",
            sa.UUID(),
            nullable=True,
            comment="FK to represent hierarchy in organization, e.g., main organizations and units",
        ),
        sa.Column(
            "name", sa.String(), nullable=False, comment="Name of the organizations"
        ),
        sa.Column(
            "type", sa.String(), nullable=False, comment="Category of the organization"
        ),
        sa.Column(
            "contact",
            sa.String(),
            nullable=True,
            comment="Free text form for contact information",
        ),
        sa.Column(
            "contact_id",
            sa.UUID(),
            nullable=True,
            comment="Foreign Key to the orgzanization contact; just one contact for a given organization in this version of the schema",
        ),
        sa.Column("location_id", sa.UUID(), nullable=True, comment="FK to location"),
        sa.Column(
            "description",
            sa.String(),
            nullable=True,
            comment="Description of the organization",
        ),
        sa.Column(
            "dynamic_properties",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
            comment="Flexible JSON schema to store additional properties",
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["contact_id"],
            ["people.id"],
        ),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["locations.id"],
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["organizations.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "datasets",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
            comment="An identifier for the set of resources",
        ),
        sa.Column(
            "name",
            sa.String(),
            nullable=False,
            comment="The name identifying the data set from which the record was derived.",
        ),
        sa.Column(
            "description",
            sa.String(),
            nullable=False,
            comment="Description of the dataset",
        ),
        sa.Column(
            "doi",
            sa.String(),
            nullable=True,
            comment="Publication unique identifier for a reference associated to this datasets",
        ),
        sa.Column(
            "created_by",
            sa.UUID(),
            nullable=False,
            comment="Foreign Key to the dataset creator",
        ),
        sa.Column(
            "maintained_by",
            sa.UUID(),
            nullable=False,
            comment="Foreign Key to the dataset maintainers; just one maintainer for a given dataset in this version of the schema",
        ),
        sa.Column(
            "contact",
            sa.UUID(),
            nullable=False,
            comment="Foreign Key to the contact person for this dataset",
        ),
        sa.Column(
            "published_by",
            sa.UUID(),
            nullable=False,
            comment="Foreign Key to the organization",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            nullable=False,
            comment="Creation datetime for this resource",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            nullable=False,
            comment="Modification datetime for this resource",
        ),
        sa.Column(
            "dynamic_properties",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
            comment="Flexible JSON schema to store additional properties",
        ),
        sa.ForeignKeyConstraint(
            ["contact"],
            ["people.id"],
        ),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["people.id"],
        ),
        sa.ForeignKeyConstraint(
            ["maintained_by"],
            ["people.id"],
        ),
        sa.ForeignKeyConstraint(
            ["published_by"],
            ["organizations.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_datasets_id"), "datasets", ["id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_datasets_id"), table_name="datasets")
    op.drop_table("datasets")
    op.drop_table("organizations")
    op.drop_table("people")
    op.drop_index("idx_locations_geom", table_name="locations", postgresql_using="gist")
    op.drop_table("locations")
    # ### end Alembic commands ###
